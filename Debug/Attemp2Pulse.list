
Attemp2Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f04  08002f04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f04  08002f04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f04  08002f04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094fd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000150f  00000000  00000000  00029539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9a3  00000000  00000000  0002bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5c5  00000000  00000000  0004a5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba882  00000000  00000000  00054b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f41a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000267c  00000000  00000000  0010f46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ebc 	.word	0x08002ebc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ebc 	.word	0x08002ebc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9c2 	bl	8000554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8b4 	bl	8000340 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f848 	bl	800026c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //TIM2->CCR1 = 100; /* this overwrites directly the length of the pulse even if is set to another time, so it is not necessary to og to .ioc all the time */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // If we want to use the moving pulse, we should add at the end of the function _IT
 80001dc:	2100      	movs	r1, #0
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <main+0x28>)
 80001e0:	f001 ff1e 	bl	8002020 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001e4:	2104      	movs	r1, #4
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <main+0x28>)
 80001e8:	f001 ff1a 	bl	8002020 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	e7fe      	b.n	80001ec <main+0x24>
 80001ee:	bf00      	nop
 80001f0:	20000028 	.word	0x20000028

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fe52 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fc7c 	bl	8000b28 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000236:	f000 f89b 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fca6 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 f887 	bl	8000370 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08a      	sub	sp, #40	; 0x28
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000272:	f107 031c 	add.w	r3, r7, #28
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800027e:	463b      	mov	r3, r7
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
 800028c:	615a      	str	r2, [r3, #20]
 800028e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000290:	4b2a      	ldr	r3, [pc, #168]	; (800033c <MX_TIM2_Init+0xd0>)
 8000292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000298:	4b28      	ldr	r3, [pc, #160]	; (800033c <MX_TIM2_Init+0xd0>)
 800029a:	2207      	movs	r2, #7
 800029c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029e:	4b27      	ldr	r3, [pc, #156]	; (800033c <MX_TIM2_Init+0xd0>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80002a4:	4b25      	ldr	r3, [pc, #148]	; (800033c <MX_TIM2_Init+0xd0>)
 80002a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ac:	4b23      	ldr	r3, [pc, #140]	; (800033c <MX_TIM2_Init+0xd0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <MX_TIM2_Init+0xd0>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002b8:	4820      	ldr	r0, [pc, #128]	; (800033c <MX_TIM2_Init+0xd0>)
 80002ba:	f001 fe59 	bl	8001f70 <HAL_TIM_PWM_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80002c4:	f000 f854 	bl	8000370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002cc:	2300      	movs	r3, #0
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d0:	f107 031c 	add.w	r3, r7, #28
 80002d4:	4619      	mov	r1, r3
 80002d6:	4819      	ldr	r0, [pc, #100]	; (800033c <MX_TIM2_Init+0xd0>)
 80002d8:	f002 fd38 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80002e2:	f000 f845 	bl	8000370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002e6:	2360      	movs	r3, #96	; 0x60
 80002e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250-1;
 80002ea:	23f9      	movs	r3, #249	; 0xf9
 80002ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002f6:	463b      	mov	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	4619      	mov	r1, r3
 80002fc:	480f      	ldr	r0, [pc, #60]	; (800033c <MX_TIM2_Init+0xd0>)
 80002fe:	f002 f89b 	bl	8002438 <HAL_TIM_PWM_ConfigChannel>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000308:	f000 f832 	bl	8000370 <Error_Handler>
  }
  sConfigOC.Pulse = 550-1;
 800030c:	f240 2325 	movw	r3, #549	; 0x225
 8000310:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000312:	2302      	movs	r3, #2
 8000314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	2204      	movs	r2, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <MX_TIM2_Init+0xd0>)
 800031e:	f002 f88b 	bl	8002438 <HAL_TIM_PWM_ConfigChannel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000328:	f000 f822 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <MX_TIM2_Init+0xd0>)
 800032e:	f000 f86d 	bl	800040c <HAL_TIM_MspPostInit>

}
 8000332:	bf00      	nop
 8000334:	3728      	adds	r7, #40	; 0x28
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_GPIO_Init+0x2c>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <MX_GPIO_Init+0x2c>)
 800034c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_GPIO_Init+0x2c>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x44>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x44>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x44>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <HAL_MspInit+0x44>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <HAL_MspInit+0x44>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HAL_MspInit+0x44>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003d4:	d113      	bne.n	80003fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_TIM_PWM_MspInit+0x44>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <HAL_TIM_PWM_MspInit+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <HAL_TIM_PWM_MspInit+0x44>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	201c      	movs	r0, #28
 80003f4:	f000 f9ef 	bl	80007d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80003f8:	201c      	movs	r0, #28
 80003fa:	f000 fa08 	bl	800080e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 030c 	add.w	r3, r7, #12
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800042c:	d11c      	bne.n	8000468 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_TIM_MspPostInit+0x64>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <HAL_TIM_MspPostInit+0x64>)
 8000434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <HAL_TIM_MspPostInit+0x64>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000446:	2303      	movs	r3, #3
 8000448:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044a:	2302      	movs	r3, #2
 800044c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000456:	2301      	movs	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 f9ee 	bl	8000844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000

08000474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <NMI_Handler+0x4>

0800047a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <HardFault_Handler+0x4>

08000480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <MemManage_Handler+0x4>

08000486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <UsageFault_Handler+0x4>

08000492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c0:	f000 f88e 	bl	80005e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <TIM2_IRQHandler+0x10>)
 80004ce:	f001 fe93 	bl	80021f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000028 	.word	0x20000028

080004dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <SystemInit+0x20>)
 80004e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <SystemInit+0x20>)
 80004e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000504:	f7ff ffea 	bl	80004dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <LoopForever+0x6>)
  ldr r1, =_edata
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <LoopForever+0xe>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <LoopForever+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052e:	f002 fc99 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000532:	f7ff fe49 	bl	80001c8 <main>

08000536 <LoopForever>:

LoopForever:
    b LoopForever
 8000536:	e7fe      	b.n	8000536 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000538:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000540:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000544:	08002f0c 	.word	0x08002f0c
  ldr r2, =_sbss
 8000548:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800054c:	20000078 	.word	0x20000078

08000550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC1_2_IRQHandler>
	...

08000554 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_Init+0x28>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_Init+0x28>)
 800055e:	f043 0310 	orr.w	r3, r3, #16
 8000562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f92b 	bl	80007c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	200f      	movs	r0, #15
 800056c:	f000 f808 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000570:	f7ff ff04 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40022000 	.word	0x40022000

08000580 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_InitTick+0x54>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_InitTick+0x58>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	fbb3 f3f1 	udiv	r3, r3, r1
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f943 	bl	800082a <HAL_SYSTICK_Config>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e00e      	b.n	80005cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d80a      	bhi.n	80005ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f90b 	bl	80007d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <HAL_InitTick+0x5c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e000      	b.n	80005cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_IncTick+0x20>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x24>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_IncTick+0x24>)
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008
 8000604:	20000074 	.word	0x20000074

08000608 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;  
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <HAL_GetTick+0x14>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000074 	.word	0x20000074

08000620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	2b00      	cmp	r3, #0
 8000694:	db0b      	blt.n	80006ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 021f 	and.w	r2, r3, #31
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <__NVIC_EnableIRQ+0x38>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	095b      	lsrs	r3, r3, #5
 80006a4:	2001      	movs	r0, #1
 80006a6:	fa00 f202 	lsl.w	r2, r0, r2
 80006aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db0a      	blt.n	80006ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <__NVIC_SetPriority+0x4c>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e8:	e00a      	b.n	8000700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4908      	ldr	r1, [pc, #32]	; (8000710 <__NVIC_SetPriority+0x50>)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	3b04      	subs	r3, #4
 80006f8:	0112      	lsls	r2, r2, #4
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	761a      	strb	r2, [r3, #24]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f1c3 0307 	rsb	r3, r3, #7
 800072e:	2b04      	cmp	r3, #4
 8000730:	bf28      	it	cs
 8000732:	2304      	movcs	r3, #4
 8000734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3304      	adds	r3, #4
 800073a:	2b06      	cmp	r3, #6
 800073c:	d902      	bls.n	8000744 <NVIC_EncodePriority+0x30>
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3b03      	subs	r3, #3
 8000742:	e000      	b.n	8000746 <NVIC_EncodePriority+0x32>
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	43da      	mvns	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	401a      	ands	r2, r3
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800075c:	f04f 31ff 	mov.w	r1, #4294967295
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	43d9      	mvns	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	4313      	orrs	r3, r2
         );
}
 800076e:	4618      	mov	r0, r3
 8000770:	3724      	adds	r7, #36	; 0x24
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800078c:	d301      	bcc.n	8000792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2301      	movs	r3, #1
 8000790:	e00f      	b.n	80007b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SysTick_Config+0x40>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079a:	210f      	movs	r1, #15
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f7ff ff8e 	bl	80006c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <SysTick_Config+0x40>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SysTick_Config+0x40>)
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff29 	bl	8000620 <__NVIC_SetPriorityGrouping>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e8:	f7ff ff3e 	bl	8000668 <__NVIC_GetPriorityGrouping>
 80007ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f7ff ff8e 	bl	8000714 <NVIC_EncodePriority>
 80007f8:	4602      	mov	r2, r0
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff5d 	bl	80006c0 <__NVIC_SetPriority>
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff31 	bl	8000684 <__NVIC_EnableIRQ>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffa2 	bl	800077c <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000852:	e14e      	b.n	8000af2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8140 	beq.w	8000aec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d005      	beq.n	8000884 <HAL_GPIO_Init+0x40>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d017      	beq.n	8000922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	2b02      	cmp	r3, #2
 800092c:	d123      	bne.n	8000976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	08da      	lsrs	r2, r3, #3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3208      	adds	r2, #8
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0203 	and.w	r2, r3, #3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 809a 	beq.w	8000aec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009fa:	d013      	beq.n	8000a24 <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <HAL_GPIO_Init+0x2d4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d00d      	beq.n	8000a20 <HAL_GPIO_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <HAL_GPIO_Init+0x2d8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x1d8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <HAL_GPIO_Init+0x2dc>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_GPIO_Init+0x1d4>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a18:	2305      	movs	r3, #5
 8000a1a:	e004      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e002      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a24:	2300      	movs	r3, #0
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	f002 0203 	and.w	r2, r2, #3
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	4093      	lsls	r3, r2
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a36:	4937      	ldr	r1, [pc, #220]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a44:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f47f aea9 	bne.w	8000854 <HAL_GPIO_Init+0x10>
  }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48000c00 	.word	0x48000c00
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f001 b823 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 817d 	beq.w	8000e5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b64:	4bbc      	ldr	r3, [pc, #752]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d00c      	beq.n	8000b8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b70:	4bb9      	ldr	r3, [pc, #740]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d15c      	bne.n	8000c36 <HAL_RCC_OscConfig+0x10e>
 8000b7c:	4bb6      	ldr	r3, [pc, #728]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d155      	bne.n	8000c36 <HAL_RCC_OscConfig+0x10e>
 8000b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b8e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b96:	fa93 f3a3 	rbit	r3, r3
 8000b9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba2:	fab3 f383 	clz	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	095b      	lsrs	r3, r3, #5
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d102      	bne.n	8000bbc <HAL_RCC_OscConfig+0x94>
 8000bb6:	4ba8      	ldr	r3, [pc, #672]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	e015      	b.n	8000be8 <HAL_RCC_OscConfig+0xc0>
 8000bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bc8:	fa93 f3a3 	rbit	r3, r3
 8000bcc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bd8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000be4:	4b9c      	ldr	r3, [pc, #624]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bf0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bf4:	fa92 f2a2 	rbit	r2, r2
 8000bf8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000bfc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	f042 0220 	orr.w	r2, r2, #32
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	f002 021f 	and.w	r2, r2, #31
 8000c10:	2101      	movs	r1, #1
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 811f 	beq.w	8000e5c <HAL_RCC_OscConfig+0x334>
 8000c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 8116 	bne.w	8000e5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	f000 bfaf 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c46:	d106      	bne.n	8000c56 <HAL_RCC_OscConfig+0x12e>
 8000c48:	4b83      	ldr	r3, [pc, #524]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a82      	ldr	r2, [pc, #520]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	e036      	b.n	8000cc4 <HAL_RCC_OscConfig+0x19c>
 8000c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <HAL_RCC_OscConfig+0x158>
 8000c66:	4b7c      	ldr	r3, [pc, #496]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a7b      	ldr	r2, [pc, #492]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a78      	ldr	r2, [pc, #480]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e021      	b.n	8000cc4 <HAL_RCC_OscConfig+0x19c>
 8000c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x184>
 8000c92:	4b71      	ldr	r3, [pc, #452]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a70      	ldr	r2, [pc, #448]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b6e      	ldr	r3, [pc, #440]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6d      	ldr	r2, [pc, #436]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0x19c>
 8000cac:	4b6a      	ldr	r3, [pc, #424]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a69      	ldr	r2, [pc, #420]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b67      	ldr	r3, [pc, #412]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cc4:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	f023 020f 	bic.w	r2, r3, #15
 8000ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	495f      	ldr	r1, [pc, #380]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d059      	beq.n	8000da2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff fc8b 	bl	8000608 <HAL_GetTick>
 8000cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fc86 	bl	8000608 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b64      	cmp	r3, #100	; 0x64
 8000d06:	d902      	bls.n	8000d0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f000 bf43 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
 8000d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	fab3 f383 	clz	r3, r3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	095b      	lsrs	r3, r3, #5
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <HAL_RCC_OscConfig+0x218>
 8000d3a:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	e015      	b.n	8000d6c <HAL_RCC_OscConfig+0x244>
 8000d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d44:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d4c:	fa93 f3a3 	rbit	r3, r3
 8000d50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d58:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d60:	fa93 f3a3 	rbit	r3, r3
 8000d64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d70:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d78:	fa92 f2a2 	rbit	r2, r2
 8000d7c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	f042 0220 	orr.w	r2, r2, #32
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	f002 021f 	and.w	r2, r2, #31
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0ab      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x1d0>
 8000da0:	e05d      	b.n	8000e5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fc31 	bl	8000608 <HAL_GetTick>
 8000da6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	e00a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fc2c 	bl	8000608 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b64      	cmp	r3, #100	; 0x64
 8000dba:	d902      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f000 bee9 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000dd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	fab3 f383 	clz	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	095b      	lsrs	r3, r3, #5
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <HAL_RCC_OscConfig+0x2cc>
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	e015      	b.n	8000e20 <HAL_RCC_OscConfig+0x2f8>
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e24:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e28:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e2c:	fa92 f2a2 	rbit	r2, r2
 8000e30:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e34:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f042 0220 	orr.w	r2, r2, #32
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1ab      	bne.n	8000dac <HAL_RCC_OscConfig+0x284>
 8000e54:	e003      	b.n	8000e5e <HAL_RCC_OscConfig+0x336>
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 817d 	beq.w	800116e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e74:	4ba6      	ldr	r3, [pc, #664]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00b      	beq.n	8000e98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e80:	4ba3      	ldr	r3, [pc, #652]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d172      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
 8000e8c:	4ba0      	ldr	r3, [pc, #640]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d16c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000eaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d102      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x3a0>
 8000ec2:	4b93      	ldr	r3, [pc, #588]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	e013      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3c8>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ee0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000eec:	4b88      	ldr	r3, [pc, #544]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ef6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000efa:	fa92 f2a2 	rbit	r2, r2
 8000efe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f06:	fab2 f282 	clz	r2, r2
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	f042 0220 	orr.w	r2, r2, #32
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	f002 021f 	and.w	r2, r2, #31
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00a      	beq.n	8000f38 <HAL_RCC_OscConfig+0x410>
 8000f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d002      	beq.n	8000f38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	f000 be2e 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	4b75      	ldr	r3, [pc, #468]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	21f8      	movs	r1, #248	; 0xf8
 8000f4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f56:	fa91 f1a1 	rbit	r1, r1
 8000f5a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f62:	fab1 f181 	clz	r1, r1
 8000f66:	b2c9      	uxtb	r1, r1
 8000f68:	408b      	lsls	r3, r1
 8000f6a:	4969      	ldr	r1, [pc, #420]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f70:	e0fd      	b.n	800116e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8088 	beq.w	8001094 <HAL_RCC_OscConfig+0x56c>
 8000f84:	2301      	movs	r3, #1
 8000f86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	461a      	mov	r2, r3
 8000fac:	2301      	movs	r3, #1
 8000fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fb2a 	bl	8000608 <HAL_GetTick>
 8000fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fb25 	bl	8000608 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d902      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f000 bde2 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	fab3 f383 	clz	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d102      	bne.n	8001000 <HAL_RCC_OscConfig+0x4d8>
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	e013      	b.n	8001028 <HAL_RCC_OscConfig+0x500>
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001018:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2202      	movs	r2, #2
 800102a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800102e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001032:	fa92 f2a2 	rbit	r2, r2
 8001036:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800103a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800103e:	fab2 f282 	clz	r2, r2
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f042 0220 	orr.w	r2, r2, #32
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	f002 021f 	and.w	r2, r2, #31
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0af      	beq.n	8000fba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	21f8      	movs	r1, #248	; 0xf8
 8001070:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001078:	fa91 f1a1 	rbit	r1, r1
 800107c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001080:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001084:	fab1 f181 	clz	r1, r1
 8001088:	b2c9      	uxtb	r1, r1
 800108a:	408b      	lsls	r3, r1
 800108c:	4920      	ldr	r1, [pc, #128]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
 8001092:	e06c      	b.n	800116e <HAL_RCC_OscConfig+0x646>
 8001094:	2301      	movs	r3, #1
 8001096:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	461a      	mov	r2, r3
 80010bc:	2300      	movs	r3, #0
 80010be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff faa2 	bl	8000608 <HAL_GetTick>
 80010c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fa9d 	bl	8000608 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d902      	bls.n	80010e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	f000 bd5a 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d104      	bne.n	8001114 <HAL_RCC_OscConfig+0x5ec>
 800110a:	4b01      	ldr	r3, [pc, #4]	; (8001110 <HAL_RCC_OscConfig+0x5e8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	e015      	b.n	800113c <HAL_RCC_OscConfig+0x614>
 8001110:	40021000 	.word	0x40021000
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800112c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001138:	4bc8      	ldr	r3, [pc, #800]	; (800145c <HAL_RCC_OscConfig+0x934>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2202      	movs	r2, #2
 800113e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001142:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001146:	fa92 f2a2 	rbit	r2, r2
 800114a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800114e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001152:	fab2 f282 	clz	r2, r2
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ad      	bne.n	80010ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8110 	beq.w	80013a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d079      	beq.n	8001288 <HAL_RCC_OscConfig+0x760>
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	4bab      	ldr	r3, [pc, #684]	; (8001460 <HAL_RCC_OscConfig+0x938>)
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	461a      	mov	r2, r3
 80011ba:	2301      	movs	r3, #1
 80011bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fa23 	bl	8000608 <HAL_GetTick>
 80011c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fa1e 	bl	8000608 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d902      	bls.n	80011de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	f000 bcdb 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011f8:	2202      	movs	r2, #2
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001200:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fa93 f2a3 	rbit	r2, r3
 800120a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800121c:	2202      	movs	r2, #2
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	fa93 f2a3 	rbit	r2, r3
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001236:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001238:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x934>)
 800123a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800123c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001240:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001244:	2102      	movs	r1, #2
 8001246:	6019      	str	r1, [r3, #0]
 8001248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	fa93 f1a3 	rbit	r1, r3
 8001256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800125e:	6019      	str	r1, [r3, #0]
  return result;
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0a0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x6a0>
 8001286:	e08d      	b.n	80013a4 <HAL_RCC_OscConfig+0x87c>
 8001288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001298:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	fa93 f2a3 	rbit	r2, r3
 80012a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012aa:	601a      	str	r2, [r3, #0]
  return result;
 80012ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4b68      	ldr	r3, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x938>)
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	461a      	mov	r2, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff f99d 	bl	8000608 <HAL_GetTick>
 80012ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff f998 	bl	8000608 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d902      	bls.n	80012ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	f000 bc55 	b.w	8001b94 <HAL_RCC_OscConfig+0x106c>
 80012ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	fa93 f2a3 	rbit	r2, r3
 8001304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001308:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001312:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001316:	2202      	movs	r2, #2
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	fa93 f2a3 	rbit	r2, r3
 8001328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800133a:	2202      	movs	r2, #2
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	fa93 f2a3 	rbit	r2, r3
 800134c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001350:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001354:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x934>)
 8001358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001362:	2102      	movs	r1, #2
 8001364:	6019      	str	r1, [r3, #0]
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	fa93 f1a3 	rbit	r1, r3
 8001374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001378:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800137c:	6019      	str	r1, [r3, #0]
  return result;
 800137e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001382:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d197      	bne.n	80012d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 81a1 	beq.w	80016fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_RCC_OscConfig+0x934>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d116      	bne.n	80013fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <HAL_RCC_OscConfig+0x934>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4a22      	ldr	r2, [pc, #136]	; (800145c <HAL_RCC_OscConfig+0x934>)
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	61d3      	str	r3, [r2, #28]
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_RCC_OscConfig+0x934>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80013f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_RCC_OscConfig+0x93c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11a      	bne.n	800143c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_RCC_OscConfig+0x93c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_RCC_OscConfig+0x93c>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff f8f9 	bl	8000608 <HAL_GetTick>
 8001416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	e009      	b.n	8001430 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff f8f4 	bl	8000608 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e3b1      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_OscConfig+0x93c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ef      	beq.n	800141c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d10d      	bne.n	8001468 <HAL_RCC_OscConfig+0x940>
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_RCC_OscConfig+0x934>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4a02      	ldr	r2, [pc, #8]	; (800145c <HAL_RCC_OscConfig+0x934>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6213      	str	r3, [r2, #32]
 8001458:	e03c      	b.n	80014d4 <HAL_RCC_OscConfig+0x9ac>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	10908120 	.word	0x10908120
 8001464:	40007000 	.word	0x40007000
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10c      	bne.n	8001492 <HAL_RCC_OscConfig+0x96a>
 8001478:	4bc1      	ldr	r3, [pc, #772]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4ac0      	ldr	r2, [pc, #768]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	4bbe      	ldr	r3, [pc, #760]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4abd      	ldr	r2, [pc, #756]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 800148a:	f023 0304 	bic.w	r3, r3, #4
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	e020      	b.n	80014d4 <HAL_RCC_OscConfig+0x9ac>
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x994>
 80014a2:	4bb7      	ldr	r3, [pc, #732]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4ab6      	ldr	r2, [pc, #728]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4bb4      	ldr	r3, [pc, #720]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4ab3      	ldr	r2, [pc, #716]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x9ac>
 80014bc:	4bb0      	ldr	r3, [pc, #704]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4aaf      	ldr	r2, [pc, #700]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	4bad      	ldr	r3, [pc, #692]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4aac      	ldr	r2, [pc, #688]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8081 	beq.w	80015e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f88f 	bl	8000608 <HAL_GetTick>
 80014ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff f88a 	bl	8000608 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e345      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
 8001508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001510:	2202      	movs	r2, #2
 8001512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800154e:	601a      	str	r2, [r3, #0]
  return result;
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001558:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	095b      	lsrs	r3, r3, #5
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d102      	bne.n	8001574 <HAL_RCC_OscConfig+0xa4c>
 800156e:	4b84      	ldr	r3, [pc, #528]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	e013      	b.n	800159c <HAL_RCC_OscConfig+0xa74>
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800157c:	2202      	movs	r2, #2
 800157e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	fa93 f2a3 	rbit	r2, r3
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	4b79      	ldr	r3, [pc, #484]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015a4:	2102      	movs	r1, #2
 80015a6:	6011      	str	r1, [r2, #0]
 80015a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	fa92 f1a2 	rbit	r1, r2
 80015b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015be:	6011      	str	r1, [r2, #0]
  return result;
 80015c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	fab2 f282 	clz	r2, r2
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f002 021f 	and.w	r2, r2, #31
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d084      	beq.n	80014f0 <HAL_RCC_OscConfig+0x9c8>
 80015e6:	e07f      	b.n	80016e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f80e 	bl	8000608 <HAL_GetTick>
 80015ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f809 	bl	8000608 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2c4      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001612:	2202      	movs	r2, #2
 8001614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001636:	2202      	movs	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001650:	601a      	str	r2, [r3, #0]
  return result;
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800165a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0xb4e>
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	e013      	b.n	800169e <HAL_RCC_OscConfig+0xb76>
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800167e:	2202      	movs	r2, #2
 8001680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f2a3 	rbit	r2, r3
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016a6:	2102      	movs	r1, #2
 80016a8:	6011      	str	r1, [r2, #0]
 80016aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	fa92 f1a2 	rbit	r1, r2
 80016b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016c0:	6011      	str	r1, [r2, #0]
  return result;
 80016c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	fab2 f282 	clz	r2, r2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d184      	bne.n	80015f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8242 	beq.w	8001b92 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_RCC_OscConfig+0xc58>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	f000 8213 	beq.w	8001b42 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b02      	cmp	r3, #2
 800172a:	f040 8162 	bne.w	80019f2 <HAL_RCC_OscConfig+0xeca>
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800173a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001752:	601a      	str	r2, [r3, #0]
  return result;
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800175c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	461a      	mov	r2, r3
 8001770:	2300      	movs	r3, #0
 8001772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7fe ff48 	bl	8000608 <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	e00c      	b.n	8001798 <HAL_RCC_OscConfig+0xc70>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7fe ff40 	bl	8000608 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1fd      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017bc:	601a      	str	r2, [r3, #0]
  return result;
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0xcba>
 80017dc:	4bb0      	ldr	r3, [pc, #704]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e027      	b.n	8001832 <HAL_RCC_OscConfig+0xd0a>
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001836:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800183a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800183e:	6011      	str	r1, [r2, #0]
 8001840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001844:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	fa92 f1a2 	rbit	r1, r2
 800184e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001852:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001856:	6011      	str	r1, [r2, #0]
  return result;
 8001858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f002 021f 	and.w	r2, r2, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d182      	bne.n	8001784 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	430b      	orrs	r3, r1
 80018a0:	497f      	ldr	r1, [pc, #508]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	fa93 f2a3 	rbit	r2, r3
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018ca:	601a      	str	r2, [r3, #0]
  return result;
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7fe fe8c 	bl	8000608 <HAL_GetTick>
 80018f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f4:	e009      	b.n	800190a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7fe fe87 	bl	8000608 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e144      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800192e:	601a      	str	r2, [r3, #0]
  return result;
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001938:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0xe2c>
 800194e:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e027      	b.n	80019a4 <HAL_RCC_OscConfig+0xe7c>
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800195c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b0:	6011      	str	r1, [r2, #0]
 80019b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	fa92 f1a2 	rbit	r1, r2
 80019c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80019c8:	6011      	str	r1, [r2, #0]
  return result;
 80019ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fab2 f282 	clz	r2, r2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	f002 021f 	and.w	r2, r2, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d082      	beq.n	80018f6 <HAL_RCC_OscConfig+0xdce>
 80019f0:	e0cf      	b.n	8001b92 <HAL_RCC_OscConfig+0x106a>
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a16:	601a      	str	r2, [r3, #0]
  return result;
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe fde6 	bl	8000608 <HAL_GetTick>
 8001a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe fde1 	bl	8000608 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e09e      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a7a:	601a      	str	r2, [r3, #0]
  return result;
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d104      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xf7c>
 8001a9a:	4b01      	ldr	r3, [pc, #4]	; (8001aa0 <HAL_RCC_OscConfig+0xf78>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e029      	b.n	8001af4 <HAL_RCC_OscConfig+0xfcc>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x1078>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001afc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b00:	6011      	str	r1, [r2, #0]
 8001b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b06:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	fa92 f1a2 	rbit	r1, r2
 8001b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b14:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b18:	6011      	str	r1, [r2, #0]
  return result;
 8001b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d180      	bne.n	8001a42 <HAL_RCC_OscConfig+0xf1a>
 8001b40:	e027      	b.n	8001b92 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e01e      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_RCC_OscConfig+0x1078>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09e      	sub	sp, #120	; 0x78
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e162      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b90      	ldr	r3, [pc, #576]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b8d      	ldr	r3, [pc, #564]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	498b      	ldr	r1, [pc, #556]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e14a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	497f      	ldr	r1, [pc, #508]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80dc 	beq.w	8001dd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d13c      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xf6>
 8001c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xa6>
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e00f      	b.n	8001c6a <HAL_RCC_ClockConfig+0xc6>
 8001c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	667b      	str	r3, [r7, #100]	; 0x64
 8001c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0220 	orr.w	r2, r2, #32
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d17b      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0f3      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d13c      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x178>
 8001ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x128>
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_ClockConfig+0x148>
 8001ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	643b      	str	r3, [r7, #64]	; 0x40
 8001ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13a      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b2      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x1a0>
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e00d      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1bc>
 8001d44:	2302      	movs	r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2202      	movs	r2, #2
 8001d62:	61ba      	str	r2, [r7, #24]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	617a      	str	r2, [r7, #20]
  return result;
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e079      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	491a      	ldr	r1, [pc, #104]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7fe fc32 	bl	8000608 <HAL_GetTick>
 8001da4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7fe fc2e 	bl	8000608 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e061      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d214      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	4906      	ldr	r1, [pc, #24]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_RCC_ClockConfig+0x2de>
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4912      	ldr	r1, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e46:	f000 f829 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_RCC_ClockConfig+0x2e8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	22f0      	movs	r2, #240	; 0xf0
 8001e56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	40d3      	lsrs	r3, r2
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x2ec>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_RCC_ClockConfig+0x2f0>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_RCC_ClockConfig+0x2f4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb80 	bl	8000580 <HAL_InitTick>
  
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3778      	adds	r7, #120	; 0x78
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08002ed4 	.word	0x08002ed4
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b08b      	sub	sp, #44	; 0x2c
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x30>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eca:	e03c      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ece:	623b      	str	r3, [r7, #32]
      break;
 8001ed0:	e03c      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ed8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001edc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	fa92 f2a2 	rbit	r2, r2
 8001ee4:	607a      	str	r2, [r7, #4]
  return result;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	40d3      	lsrs	r3, r2
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	220f      	movs	r2, #15
 8001f00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	fa92 f2a2 	rbit	r2, r2
 8001f08:	60fa      	str	r2, [r7, #12]
  return result;
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	40d3      	lsrs	r3, r2
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e004      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	623b      	str	r3, [r7, #32]
      break;
 8001f44:	e002      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f48:	623b      	str	r3, [r7, #32]
      break;
 8001f4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	372c      	adds	r7, #44	; 0x2c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	08002ee4 	.word	0x08002ee4
 8001f68:	08002ef4 	.word	0x08002ef4
 8001f6c:	003d0900 	.word	0x003d0900

08001f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e049      	b.n	8002016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fa14 	bl	80003c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 fb88 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_TIM_PWM_Start+0x24>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e03c      	b.n	80020be <HAL_TIM_PWM_Start+0x9e>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d109      	bne.n	800205e <HAL_TIM_PWM_Start+0x3e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	e02f      	b.n	80020be <HAL_TIM_PWM_Start+0x9e>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d109      	bne.n	8002078 <HAL_TIM_PWM_Start+0x58>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e022      	b.n	80020be <HAL_TIM_PWM_Start+0x9e>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d109      	bne.n	8002092 <HAL_TIM_PWM_Start+0x72>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e015      	b.n	80020be <HAL_TIM_PWM_Start+0x9e>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b10      	cmp	r3, #16
 8002096:	d109      	bne.n	80020ac <HAL_TIM_PWM_Start+0x8c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e008      	b.n	80020be <HAL_TIM_PWM_Start+0x9e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e088      	b.n	80021d8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0xb6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	e023      	b.n	800211e <HAL_TIM_PWM_Start+0xfe>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start+0xc6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e4:	e01b      	b.n	800211e <HAL_TIM_PWM_Start+0xfe>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_PWM_Start+0xd6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	e013      	b.n	800211e <HAL_TIM_PWM_Start+0xfe>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_PWM_Start+0xe6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002104:	e00b      	b.n	800211e <HAL_TIM_PWM_Start+0xfe>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PWM_Start+0xf6>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002114:	e003      	b.n	800211e <HAL_TIM_PWM_Start+0xfe>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fdea 	bl	8002d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_TIM_PWM_Start+0x1c0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00e      	beq.n	8002154 <HAL_TIM_PWM_Start+0x134>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_TIM_PWM_Start+0x1c4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_TIM_PWM_Start+0x134>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <HAL_TIM_PWM_Start+0x1c8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <HAL_TIM_PWM_Start+0x134>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_TIM_PWM_Start+0x1cc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_TIM_PWM_Start+0x138>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_TIM_PWM_Start+0x13a>
 8002158:	2300      	movs	r3, #0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_TIM_PWM_Start+0x1c0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00e      	beq.n	8002196 <HAL_TIM_PWM_Start+0x176>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d009      	beq.n	8002196 <HAL_TIM_PWM_Start+0x176>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_TIM_PWM_Start+0x1d0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d004      	beq.n	8002196 <HAL_TIM_PWM_Start+0x176>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_TIM_PWM_Start+0x1c4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d115      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_TIM_PWM_Start+0x1d4>)
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b06      	cmp	r3, #6
 80021a6:	d015      	beq.n	80021d4 <HAL_TIM_PWM_Start+0x1b4>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d011      	beq.n	80021d4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	e008      	b.n	80021d4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e000      	b.n	80021d6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800
 80021f0:	40000400 	.word	0x40000400
 80021f4:	00010007 	.word	0x00010007

080021f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0202 	mvn.w	r2, #2
 8002224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa24 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fa16 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fa27 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0204 	mvn.w	r2, #4
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9fa 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f9ec 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f9fd 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0208 	mvn.w	r2, #8
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f9d0 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f9c2 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f9d3 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b10      	cmp	r3, #16
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0210 	mvn.w	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2208      	movs	r2, #8
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f9a6 	bl	8002688 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f998 	bl	8002674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f9a9 	bl	800269c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0201 	mvn.w	r2, #1
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f972 	bl	8002660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fd4a 	bl	8002e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b6:	d10e      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fd3d 	bl	8002e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d10e      	bne.n	8002402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d107      	bne.n	8002402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f957 	bl	80026b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	d10e      	bne.n	800242e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b20      	cmp	r3, #32
 800241c:	d107      	bne.n	800242e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f06f 0220 	mvn.w	r2, #32
 8002426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fcfd 	bl	8002e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002452:	2302      	movs	r3, #2
 8002454:	e0ff      	b.n	8002656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b14      	cmp	r3, #20
 8002462:	f200 80f0 	bhi.w	8002646 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024c1 	.word	0x080024c1
 8002470:	08002647 	.word	0x08002647
 8002474:	08002647 	.word	0x08002647
 8002478:	08002647 	.word	0x08002647
 800247c:	08002501 	.word	0x08002501
 8002480:	08002647 	.word	0x08002647
 8002484:	08002647 	.word	0x08002647
 8002488:	08002647 	.word	0x08002647
 800248c:	08002543 	.word	0x08002543
 8002490:	08002647 	.word	0x08002647
 8002494:	08002647 	.word	0x08002647
 8002498:	08002647 	.word	0x08002647
 800249c:	08002583 	.word	0x08002583
 80024a0:	08002647 	.word	0x08002647
 80024a4:	08002647 	.word	0x08002647
 80024a8:	08002647 	.word	0x08002647
 80024ac:	080025c5 	.word	0x080025c5
 80024b0:	08002647 	.word	0x08002647
 80024b4:	08002647 	.word	0x08002647
 80024b8:	08002647 	.word	0x08002647
 80024bc:	08002605 	.word	0x08002605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f974 	bl	80027b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0208 	orr.w	r2, r2, #8
 80024da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0204 	bic.w	r2, r2, #4
 80024ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6999      	ldr	r1, [r3, #24]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	619a      	str	r2, [r3, #24]
      break;
 80024fe:	e0a5      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f9da 	bl	80028c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	021a      	lsls	r2, r3, #8
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	619a      	str	r2, [r3, #24]
      break;
 8002540:	e084      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fa39 	bl	80029c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0208 	orr.w	r2, r2, #8
 800255c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0204 	bic.w	r2, r2, #4
 800256c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69d9      	ldr	r1, [r3, #28]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	61da      	str	r2, [r3, #28]
      break;
 8002580:	e064      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fa97 	bl	8002abc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69d9      	ldr	r1, [r3, #28]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	021a      	lsls	r2, r3, #8
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	61da      	str	r2, [r3, #28]
      break;
 80025c2:	e043      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fada 	bl	8002b84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002602:	e023      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fb18 	bl	8002c40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	021a      	lsls	r2, r3, #8
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002644:	e002      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
      break;
 800264a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002654:	7dfb      	ldrb	r3, [r7, #23]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop

08002660 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a32      	ldr	r2, [pc, #200]	; (80027a0 <TIM_Base_SetConfig+0xdc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d007      	beq.n	80026ec <TIM_Base_SetConfig+0x28>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0x28>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <TIM_Base_SetConfig+0xe0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <TIM_Base_SetConfig+0xdc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0x6a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0x6a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <TIM_Base_SetConfig+0xe0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0x6a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <TIM_Base_SetConfig+0xe4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0x6a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a22      	ldr	r2, [pc, #136]	; (80027ac <TIM_Base_SetConfig+0xe8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0x6a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <TIM_Base_SetConfig+0xec>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <TIM_Base_SetConfig+0xdc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00b      	beq.n	8002784 <TIM_Base_SetConfig+0xc0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <TIM_Base_SetConfig+0xe4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <TIM_Base_SetConfig+0xc0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <TIM_Base_SetConfig+0xe8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_Base_SetConfig+0xc0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <TIM_Base_SetConfig+0xec>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d103      	bne.n	800278c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	615a      	str	r2, [r3, #20]
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40014000 	.word	0x40014000
 80027ac:	40014400 	.word	0x40014400
 80027b0:	40014800 	.word	0x40014800

080027b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f023 0201 	bic.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 0302 	bic.w	r3, r3, #2
 8002800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <TIM_OC1_SetConfig+0xfc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00b      	beq.n	800282c <TIM_OC1_SetConfig+0x78>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <TIM_OC1_SetConfig+0x100>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_OC1_SetConfig+0x78>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <TIM_OC1_SetConfig+0x104>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_OC1_SetConfig+0x78>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_OC1_SetConfig+0x108>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10c      	bne.n	8002846 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0308 	bic.w	r3, r3, #8
 8002832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <TIM_OC1_SetConfig+0xfc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00b      	beq.n	8002866 <TIM_OC1_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <TIM_OC1_SetConfig+0x100>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_OC1_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <TIM_OC1_SetConfig+0x104>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_OC1_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <TIM_OC1_SetConfig+0x108>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d111      	bne.n	800288a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800286c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	621a      	str	r2, [r3, #32]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40014400 	.word	0x40014400
 80028bc:	40014800 	.word	0x40014800

080028c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0210 	bic.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0320 	bic.w	r3, r3, #32
 800290e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <TIM_OC2_SetConfig+0xf0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d10d      	bne.n	8002940 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <TIM_OC2_SetConfig+0xf0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00b      	beq.n	8002960 <TIM_OC2_SetConfig+0xa0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <TIM_OC2_SetConfig+0xf4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_OC2_SetConfig+0xa0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <TIM_OC2_SetConfig+0xf8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC2_SetConfig+0xa0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <TIM_OC2_SetConfig+0xfc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d113      	bne.n	8002988 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002966:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800296e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40014400 	.word	0x40014400
 80029bc:	40014800 	.word	0x40014800

080029c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <TIM_OC3_SetConfig+0xec>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10d      	bne.n	8002a3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <TIM_OC3_SetConfig+0xec>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <TIM_OC3_SetConfig+0xf0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <TIM_OC3_SetConfig+0xf4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <TIM_OC3_SetConfig+0xf8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	40014800 	.word	0x40014800

08002abc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	031b      	lsls	r3, r3, #12
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <TIM_OC4_SetConfig+0xb8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00b      	beq.n	8002b38 <TIM_OC4_SetConfig+0x7c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <TIM_OC4_SetConfig+0xbc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d007      	beq.n	8002b38 <TIM_OC4_SetConfig+0x7c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <TIM_OC4_SetConfig+0xc0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <TIM_OC4_SetConfig+0x7c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <TIM_OC4_SetConfig+0xc4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d109      	bne.n	8002b4c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40014400 	.word	0x40014400
 8002b80:	40014800 	.word	0x40014800

08002b84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002bc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <TIM_OC5_SetConfig+0xac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <TIM_OC5_SetConfig+0x72>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <TIM_OC5_SetConfig+0xb0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <TIM_OC5_SetConfig+0x72>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <TIM_OC5_SetConfig+0xb4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <TIM_OC5_SetConfig+0x72>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <TIM_OC5_SetConfig+0xb8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d109      	bne.n	8002c0a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40014400 	.word	0x40014400
 8002c3c:	40014800 	.word	0x40014800

08002c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <TIM_OC6_SetConfig+0xb0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <TIM_OC6_SetConfig+0x74>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <TIM_OC6_SetConfig+0xb4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <TIM_OC6_SetConfig+0x74>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <TIM_OC6_SetConfig+0xb8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_OC6_SetConfig+0x74>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <TIM_OC6_SetConfig+0xbc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d109      	bne.n	8002cc8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800

08002d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2201      	movs	r2, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1a      	ldr	r2, [r3, #32]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e054      	b.n	8002e0e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d009      	beq.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10c      	bne.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40014000 	.word	0x40014000

08002e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f820 	bl	8002ebc <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002f04 	.word	0x08002f04
 8002ea0:	08002f04 	.word	0x08002f04
 8002ea4:	08002f04 	.word	0x08002f04
 8002ea8:	08002f08 	.word	0x08002f08

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
